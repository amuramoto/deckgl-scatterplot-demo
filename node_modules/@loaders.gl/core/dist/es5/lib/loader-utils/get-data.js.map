{"version":3,"sources":["../../../../src/lib/loader-utils/get-data.js"],"names":["ERR_DATA","getUrlFromData","data","url","getArrayBufferOrStringFromDataSync","loader","text","ArrayBuffer","isView","arrayBuffer","buffer","binary","textDecoder","TextDecoder","decode","Error","getArrayBufferOrStringFromData","isArrayBuffer","getAsyncIteratorFromData","body","Symbol","asyncIterator","getIteratorFromData","oneChunk","iterator"],"mappings":"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","sourcesContent":["/* global TextDecoder */\nimport {\n  isFetchResponse,\n  isReadableStream,\n  isAsyncIterable,\n  isIterable,\n  isIterator,\n  isFileReadable\n} from '../../javascript-utils/is-type';\nimport {getStreamIterator} from '../../javascript-utils/stream-utils';\nimport fetchFileReadable from '../fetch/fetch-file.browser';\n\nconst ERR_DATA = 'Cannot convert supplied data type';\n\nexport function getUrlFromData(data) {\n  return isFetchResponse(data) ? data.url : null;\n}\n\n// export function getSizeFromData(data) {\n//   return isFetchResponse(data) ? data.headers.get('Content-Length') : null;\n// }\n\nexport function getArrayBufferOrStringFromDataSync(data, loader) {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n\n  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n    const arrayBuffer = data.buffer || data;\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n    return arrayBuffer;\n  }\n\n  throw new Error(ERR_DATA);\n}\n\n// Convert async iterator to a promise\nexport async function getArrayBufferOrStringFromData(data, loader) {\n  // Resolve any promise\n  data = await data;\n\n  const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n  if (typeof data === 'string' || isArrayBuffer) {\n    return getArrayBufferOrStringFromDataSync(data, loader);\n  }\n\n  // Blobs and files are FileReader compatible\n  if (isFileReadable(data)) {\n    data = await fetchFileReadable(data);\n  }\n\n  if (isFetchResponse(data)) {\n    return loader.binary ? await data.arrayBuffer() : data.text();\n  }\n\n  // if (isIterable(data) || isAsyncIterable(data)) {\n  // }\n\n  // Assume arrayBuffer iterator - attempt to concatenate\n  // return concatenateAsyncIterator(data);\n\n  throw new Error(ERR_DATA);\n}\n\nexport function getAsyncIteratorFromData(data) {\n  if (isIterator(data)) {\n    return data;\n  }\n\n  // TODO: Our fetchFileReaderObject response does not yet support a body stream\n  if (isFetchResponse(data) && data.body) {\n    return getStreamIterator(data.body);\n  }\n\n  if (isReadableStream(data)) {\n    return getStreamIterator(data);\n  }\n\n  if (isAsyncIterable(data)) {\n    return data[Symbol.asyncIterator]();\n  }\n\n  return getIteratorFromData(data);\n}\n\nexport function getIteratorFromData(data) {\n  // generate an iterator that emits a single chunk\n  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n    return (function* oneChunk() {\n      yield data.buffer || data;\n    })();\n  }\n\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isIterable(data)) {\n    return data[Symbol.iterator]();\n  }\n\n  throw new Error(ERR_DATA);\n}\n"],"file":"get-data.js"}