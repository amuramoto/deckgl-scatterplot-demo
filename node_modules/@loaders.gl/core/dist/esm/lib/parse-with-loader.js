import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import assert from '../utils/assert';
import parseWithWorker from './parse-with-worker';
import { getArrayBufferOrStringFromDataSync, getArrayBufferOrStringFromData, getAsyncIteratorFromData, getIteratorFromData, getUrlFromData } from './loader-utils/get-data';
export function parseWithLoader(_x, _x2, _x3, _x4) {
  return _parseWithLoader.apply(this, arguments);
}

function _parseWithLoader() {
  _parseWithLoader = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, loader, options, url) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            url = url || getUrlFromData(data);
            _context.next = 3;
            return getArrayBufferOrStringFromData(data, loader);

          case 3:
            data = _context.sent;

            if (!(loader.parseTextSync && typeof data === 'string')) {
              _context.next = 7;
              break;
            }

            options.dataType = 'text';
            return _context.abrupt("return", loader.parseTextSync(data, options, url, loader));

          case 7:
            if (!loader.parseSync) {
              _context.next = 9;
              break;
            }

            return _context.abrupt("return", loader.parseSync(data, options, url, loader));

          case 9:
            if (!loader.parse) {
              _context.next = 13;
              break;
            }

            _context.next = 12;
            return loader.parse(data, options, url, loader);

          case 12:
            return _context.abrupt("return", _context.sent);

          case 13:
            if (!loader.worker) {
              _context.next = 17;
              break;
            }

            _context.next = 16;
            return parseWithWorker(loader.worker, data, options);

          case 16:
            return _context.abrupt("return", _context.sent);

          case 17:
            return _context.abrupt("return", assert(false));

          case 18:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parseWithLoader.apply(this, arguments);
}

export function parseWithLoaderSync(data, loader, options, url) {
  data = getArrayBufferOrStringFromDataSync(data, loader);

  if (loader.parseTextSync && typeof data === 'string') {
    return loader.parseTextSync(data, options, url, loader);
  }

  if (loader.parseSync) {
    return loader.parseSync(data, options, url, loader);
  }

  return assert(false);
}
export function parseWithLoaderInBatches(data, loader, options, url) {
  if (loader.parseInBatches) {
    var inputIterator = getAsyncIteratorFromData(data);
    var outputIterator = loader.parseInBatches(inputIterator, options, url, loader);
    return outputIterator;
  }

  return null;
}
export function parseWithLoaderInBatchesSync(data, loader, options, url) {
  if (loader.parseInBatchesSync) {
    var inputIterator = getIteratorFromData(data);
    var outputIterator = loader.parseInBatchesSync(inputIterator, options, url, loader, url);
    return outputIterator;
  }

  return assert(false);
}
//# sourceMappingURL=parse-with-loader.js.map