{"version":3,"sources":["../../../src/lib/attribute.js"],"names":["DEFAULT_STATE","isExternalBuffer","needsUpdate","needsRedraw","allocedInstances","Attribute","gl","opts","transition","noAlloc","update","accessor","bufferLayout","defaultValue","Array","isArray","Object","assign","userData","seal","_validateAttributeUpdaters","clearChangedFlags","value","length","size","id","concat","settings","find","a","Number","isFinite","duration","reason","numInstances","state","instanceCount","getInstanceCount","needsAlloc","allocCount","Math","max","ArrayType","glArrayFromType","type","constant","data","props","context","updated","call","_checkAttributeArray","_updateBufferViaStandardAccessor","undefined","_normalizeValue","hasChanged","_areValuesEqual","buffer","Buffer","externalBuffer","ArrayBuffer","isView","Error","auto","log","warn","name","out","start","value1","value2","i","accessorFunc","iterable","objectInfo","object","index","objectValue","hasUpdater","valid","layout","BaseAttribute","glType","clamped","Float32Array","Uint16Array","Uint32Array","Uint8ClampedArray","Uint8Array","Int8Array","Int16Array","Int32Array"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport GL from '@luma.gl/constants';\nimport {Buffer} from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport {createIterable} from '../utils/iterable-utils';\nimport log from '../utils/log';\nimport BaseAttribute from './base-attribute';\n\nconst DEFAULT_STATE = {\n  isExternalBuffer: false,\n  needsUpdate: true,\n  needsRedraw: false,\n  allocedInstances: -1\n};\n\nexport default class Attribute extends BaseAttribute {\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    const {\n      // deck.gl fields\n      transition = false,\n      noAlloc = false,\n      update = null,\n      accessor = null,\n      bufferLayout = null\n    } = opts;\n\n    let {defaultValue = [0, 0, 0, 0]} = opts;\n    defaultValue = Array.isArray(defaultValue) ? defaultValue : [defaultValue];\n\n    Object.assign(this.userData, DEFAULT_STATE, opts, {\n      transition,\n      noAlloc,\n      update,\n      accessor,\n      defaultValue,\n      bufferLayout\n    });\n\n    Object.seal(this.userData);\n\n    // Check all fields and generate helpful error messages\n    this._validateAttributeUpdaters();\n  }\n\n  get bufferLayout() {\n    return this.userData.bufferLayout;\n  }\n\n  set bufferLayout(layout) {\n    this.userData.bufferLayout = layout;\n  }\n\n  needsUpdate() {\n    return this.userData.needsUpdate;\n  }\n\n  needsRedraw({clearChangedFlags = false} = {}) {\n    const needsRedraw = this.userData.needsRedraw;\n    this.userData.needsRedraw = this.userData.needsRedraw && !clearChangedFlags;\n    return needsRedraw;\n  }\n\n  getInstanceCount() {\n    return this.value !== null ? this.value.length / this.size : 0;\n  }\n\n  getUpdateTriggers() {\n    const {accessor} = this.userData;\n\n    // Backards compatibility: allow attribute name to be used as update trigger key\n    return [this.id].concat(accessor || []);\n  }\n\n  getAccessor() {\n    return this.userData.accessor;\n  }\n\n  supportsTransition() {\n    return this.userData.transition;\n  }\n\n  // Resolve transition settings object if transition is enabled, otherwise `null`\n  getTransitionSetting(opts) {\n    const {transition, accessor} = this.userData;\n    if (!transition) {\n      return null;\n    }\n    let settings = Array.isArray(accessor) ? opts[accessor.find(a => opts[a])] : opts[accessor];\n\n    // Shorthand: use duration instead of parameter object\n    if (Number.isFinite(settings)) {\n      settings = {duration: settings};\n    }\n\n    if (settings && settings.duration > 0) {\n      return Object.assign({}, transition, settings);\n    }\n\n    return null;\n  }\n\n  // Checks that typed arrays for attributes are big enough\n  // sets alloc flag if not\n  // @return {Boolean} whether any updates are needed\n  setNeedsUpdate(reason = this.id) {\n    this.userData.needsUpdate = this.userData.needsUpdate || reason;\n  }\n\n  setNeedsRedraw(reason = this.id) {\n    this.userData.needsRedraw = this.userData.needsRedraw || reason;\n  }\n\n  allocate(numInstances) {\n    const state = this.userData;\n\n    if (state.isExternalBuffer || state.noAlloc) {\n      // Data is provided through a Buffer object.\n      return false;\n    }\n\n    // Do we need to reallocate the attribute's typed array?\n    const instanceCount = this.getInstanceCount();\n    const needsAlloc = instanceCount === 0 || instanceCount < numInstances;\n    if (needsAlloc && (state.update || state.accessor)) {\n      assert(Number.isFinite(numInstances));\n      // Allocate at least one element to ensure a valid buffer\n      const allocCount = Math.max(numInstances, 1);\n      const ArrayType = glArrayFromType(this.type || GL.FLOAT);\n\n      this.constant = false;\n      this.value = new ArrayType(this.size * allocCount);\n      state.needsUpdate = true;\n      state.allocedInstances = allocCount;\n      return true;\n    }\n\n    return false;\n  }\n\n  updateBuffer({numInstances, data, props, context}) {\n    if (!this.needsUpdate()) {\n      return false;\n    }\n\n    const state = this.userData;\n\n    const {update, accessor} = state;\n\n    let updated = true;\n    if (update) {\n      // Custom updater - typically for non-instanced layers\n      update.call(context, this, {data, props, numInstances});\n      this.update({\n        value: this.value,\n        constant: this.constant\n      });\n      this._checkAttributeArray();\n    } else if (accessor) {\n      // Standard updater\n      this._updateBufferViaStandardAccessor(data, props);\n      this._checkAttributeArray();\n    } else {\n      updated = false;\n    }\n\n    state.needsUpdate = false;\n    state.needsRedraw = true;\n\n    return updated;\n  }\n\n  // Use generic value\n  // Returns true if successful\n  setGenericValue(value) {\n    const state = this.userData;\n\n    if (value === undefined || typeof value === 'function') {\n      // ignore if this attribute has no accessor\n      // ignore if accessor is function, will be used in updateBuffer\n      state.isExternalBuffer = false;\n      return false;\n    }\n\n    value = this._normalizeValue(value);\n    const hasChanged = !this.constant || !this._areValuesEqual(value, this.value);\n\n    if (hasChanged) {\n      this.update({constant: true, value});\n    }\n    state.needsRedraw = state.needsUpdate || hasChanged;\n    state.needsUpdate = false;\n    state.isExternalBuffer = true;\n    return true;\n  }\n\n  // Use external buffer\n  // Returns true if successful\n  setExternalBuffer(buffer, numInstances) {\n    const state = this.userData;\n\n    if (buffer) {\n      state.isExternalBuffer = true;\n      state.needsUpdate = false;\n\n      if (buffer instanceof Buffer) {\n        if (this.externalBuffer !== buffer) {\n          this.update({constant: false, buffer});\n          state.needsRedraw = true;\n        }\n      } else if (this.value !== buffer) {\n        if (!ArrayBuffer.isView(buffer)) {\n          throw new Error('Attribute prop must be typed array');\n        }\n        if (state.auto && buffer.length <= numInstances * this.size) {\n          throw new Error('Attribute prop array must match length and size');\n        }\n\n        const ArrayType = glArrayFromType(this.type || GL.FLOAT);\n        if (buffer instanceof ArrayType) {\n          this.update({constant: false, value: buffer});\n        } else {\n          log.warn(`Attribute prop ${this.id} is casted to ${ArrayType.name}`)();\n          // Cast to proper type\n          this.update({constant: false, value: new ArrayType(buffer)});\n        }\n        // Save original typed array\n        this.value = buffer;\n        state.needsRedraw = true;\n      }\n      return true;\n    }\n\n    state.isExternalBuffer = false;\n    return false;\n  }\n\n  // PRIVATE HELPER METHODS\n\n  /* check user supplied values and apply fallback */\n  _normalizeValue(value, out = [], start = 0) {\n    const {defaultValue} = this.userData;\n\n    if (!Array.isArray(value) && !ArrayBuffer.isView(value)) {\n      out[start] = Number.isFinite(value) ? value : defaultValue[0];\n      return out;\n    }\n\n    /* eslint-disable no-fallthrough, default-case */\n    switch (this.size) {\n      case 4:\n        out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];\n      case 3:\n        out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];\n      case 2:\n        out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];\n      case 1:\n        out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];\n    }\n\n    return out;\n  }\n\n  _areValuesEqual(value1, value2, size = this.size) {\n    for (let i = 0; i < size; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  _updateBufferViaStandardAccessor(data, props) {\n    const state = this.userData;\n\n    const {accessor} = state;\n    const {value, size} = this;\n    const accessorFunc = props[accessor];\n\n    assert(typeof accessorFunc === 'function', `accessor \"${accessor}\" is not a function`);\n\n    let i = 0;\n    const {iterable, objectInfo} = createIterable(data);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const objectValue = accessorFunc(object, objectInfo);\n      this._normalizeValue(objectValue, value, i);\n      i += size;\n    }\n    this.update({value});\n  }\n\n  // Validate deck.gl level fields\n  _validateAttributeUpdaters() {\n    const state = this.userData;\n\n    // Check that either 'accessor' or 'update' is a valid function\n    const hasUpdater =\n      state.noAlloc || typeof state.update === 'function' || typeof state.accessor === 'string';\n    if (!hasUpdater) {\n      throw new Error(`Attribute ${this.id} missing update or accessor`);\n    }\n  }\n\n  _checkAttributeArray() {\n    const {value} = this;\n    if (value && value.length >= 4) {\n      const valid =\n        Number.isFinite(value[0]) &&\n        Number.isFinite(value[1]) &&\n        Number.isFinite(value[2]) &&\n        Number.isFinite(value[3]);\n      if (!valid) {\n        throw new Error(`Illegal attribute generated for ${this.id}`);\n      }\n    }\n  }\n}\n\n/* eslint-disable complexity */\nexport function glArrayFromType(glType, {clamped = true} = {}) {\n  // Sorted in some order of likelihood to reduce amount of comparisons\n  switch (glType) {\n    case GL.FLOAT:\n      return Float32Array;\n    case GL.UNSIGNED_SHORT:\n    case GL.UNSIGNED_SHORT_5_6_5:\n    case GL.UNSIGNED_SHORT_4_4_4_4:\n    case GL.UNSIGNED_SHORT_5_5_5_1:\n      return Uint16Array;\n    case GL.UNSIGNED_INT:\n      return Uint32Array;\n    case GL.UNSIGNED_BYTE:\n      return clamped ? Uint8ClampedArray : Uint8Array;\n    case GL.BYTE:\n      return Int8Array;\n    case GL.SHORT:\n      return Int16Array;\n    case GL.INT:\n      return Int32Array;\n    default:\n      throw new Error('Failed to deduce type from array');\n  }\n}\n/* eslint-enable complexity */\n"],"file":"attribute.js"}