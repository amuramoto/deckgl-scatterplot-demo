{"version":3,"sources":["../../src/google-maps-overlay.js"],"names":["createDeckInstance","destroyDeckInstance","getViewState","HIDE_ALL_LAYERS","GoogleMapsOverlay","props","_map","overlay","google","maps","OverlayView","onAdd","_onAdd","bind","draw","_draw","_overlay","setProps","map","setMap","Object","assign","_deck","params","pickObject","pickMultipleObjects","pickObjects","deck","width","height","left","top","zoom","pitch","latitude","longitude","canSyncWithGoogleMaps","canvas","style","viewState","layerFilter","redraw"],"mappings":"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","sourcesContent":["/* global google */\nimport {createDeckInstance, destroyDeckInstance, getViewState} from './utils';\n\nconst HIDE_ALL_LAYERS = () => false;\n\nexport default class GoogleMapsOverlay {\n  constructor(props) {\n    this.props = {};\n\n    this._map = null;\n\n    const overlay = new google.maps.OverlayView();\n    overlay.onAdd = this._onAdd.bind(this);\n    overlay.draw = this._draw.bind(this);\n    this._overlay = overlay;\n\n    this.setProps(props);\n  }\n\n  /* Public API */\n\n  setMap(map) {\n    if (map === this._map) {\n      return;\n    }\n    if (this._map) {\n      this._overlay.setMap(null);\n      this._map = null;\n    }\n    if (map) {\n      this._map = map;\n      this._overlay.setMap(map);\n    }\n  }\n\n  setProps(props) {\n    Object.assign(this.props, props);\n    if (this._deck) {\n      this._deck.setProps(this.props);\n    }\n  }\n\n  pickObject(params) {\n    return this._deck && this._deck.pickObject(params);\n  }\n\n  pickMultipleObjects(params) {\n    return this._deck && this._deck.pickMultipleObjects(params);\n  }\n\n  pickObjects(params) {\n    return this._deck && this._deck.pickObjects(params);\n  }\n\n  finalize() {\n    if (this._deck) {\n      destroyDeckInstance(this._deck);\n    }\n    this.setMap(null);\n  }\n\n  /* Private API */\n  _onAdd() {\n    this._deck = createDeckInstance(this._map, this._overlay, this._deck);\n    this._deck.setProps(this.props);\n  }\n\n  _draw() {\n    const deck = this._deck;\n    const {width, height, left, top, zoom, pitch, latitude, longitude} = getViewState(\n      this._map,\n      this._overlay\n    );\n\n    const canSyncWithGoogleMaps = zoom >= 0 && pitch === 0;\n\n    deck.canvas.style.left = `${left}px`;\n    deck.canvas.style.top = `${top}px`;\n\n    deck.setProps({\n      width,\n      height,\n      viewState: {latitude, longitude, zoom},\n      // deck.gl cannot sync with the base map with zoom < 0 and/or tilt\n      layerFilter: canSyncWithGoogleMaps ? this.props.layerFilter : HIDE_ALL_LAYERS\n    });\n    // Deck is initialized\n    deck.redraw();\n  }\n}\n"],"file":"google-maps-overlay.js"}